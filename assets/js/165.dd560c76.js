(window.webpackJsonp=window.webpackJsonp||[]).push([[165],{547:function(t,a,n){"use strict";n.r(a);var e=n(23),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"拉取远程分支到本地"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#拉取远程分支到本地"}},[t._v("#")]),t._v(" 拉取远程分支到本地")]),t._v(" "),n("p",[t._v("git拉取远程分支并切换到该分支\n整理了五种方法，我常用最后一种，这五种方法（除了第4中已经写了fetch的步骤）执行前都需要执行git fetch来同步远程仓库")]),t._v(" "),n("p",[t._v("（1）git checkout -b 本地分支名 origin/远程分支名")]),t._v(" "),n("p",[t._v("（2）git checkout --track origin/远程分支名 （这种写法是上面的简化版，效果完全一样）")]),t._v(" "),n("p",[t._v("（3）git checkout -t origin/远程分支名（这种写法是2的简化版）")]),t._v(" "),n("p",[t._v("（4）fetch指定的一个分支：git fetch [repo] [remote_branch_name]:[local_branch_name]")]),t._v(" "),n("p",[t._v("git checkout [local_branch_name]")]),t._v(" "),n("p",[t._v("第一行的:[local_branch_name]如果不写，则本地新建的分支名默认与远程分支名相同")]),t._v(" "),n("p",[t._v("（5）git fetch 获取远程所有分支")]),t._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -r 可以看到所有远程分支,假设有一个分支叫origin/mybranch\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout mybranch即可,会在本地新建一个同名分支,并与该远程分支关联\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout origin/mybranch 会进入detached head状态,不会在本地新建分支,不要这样写\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br")])])])}),[],!1,null,null,null);a.default=s.exports}}]);