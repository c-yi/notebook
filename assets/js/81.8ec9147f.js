(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{454:function(t,e,l){"use strict";l.r(e);var v=l(23),o=Object(v.a)({},(function(){var t=this,e=t.$createElement,l=t._self._c||e;return l("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[l("h1",{attrs:{id:"数据结构"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[t._v("#")]),t._v(" 数据结构")]),t._v(" "),l("blockquote",[l("p",[t._v("栈：一种遵从先进后出 (LIFO) 原则的有序集合；新添加的或待删除的元素都保存在栈的末尾，称作栈顶，另一端为栈底。在栈里，新元素都靠近栈顶，旧元素都接近栈底。")])]),t._v(" "),l("blockquote",[l("p",[t._v("队列：与上相反，一种遵循先进先出 (FIFO / First In First Out) 原则的一组有序的项；队列在尾部添加新元素，并从头部移除元素。最新添加的元素必须排在队列的末尾。")])]),t._v(" "),l("blockquote",[l("p",[t._v("链表：存储有序的元素集合，但不同于数组，链表中的元素在内存中并不是连续放置的；每个元素由一个存储元素本身的节点和一个指向下一个元素的引用（指针/链接）组成。")])]),t._v(" "),l("blockquote",[l("p",[t._v("集合：由一组无序且唯一（即不能重复）的项组成；这个数据结构使用了与有限集合相同的数学概念，但应用在计算机科学的数据结构中。")])]),t._v(" "),l("blockquote",[l("p",[t._v("字典：以 [键，值] 对为数据形态的数据结构，其中键名用来查询特定元素，类似于 Javascript 中的Object。")])]),t._v(" "),l("blockquote",[l("p",[t._v("哈希表：根据关键码值（Key value）直接进行访问的数据结构；它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度；这个映射函数叫做散列函数，存放记录的数组叫做散列表。")])]),t._v(" "),l("blockquote",[l("p",[t._v("树：由 n（n>=1）个有限节点组成一个具有层次关系的集合；把它叫做“树”是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的，基本呈一对多关系，树也可以看做是图的特殊形式。")])]),t._v(" "),l("blockquote",[l("p",[t._v("图：图是网络结构的抽象模型；图是一组由边连接的节点（顶点）；任何二元关系都可以用图来表示，常见的比如：道路图、关系图，呈多对多关系。")])]),t._v(" "),l("ul",[l("li",[t._v("线性数据结构\n"),l("ul",[l("li",[t._v("顺序存储结构 (存储连续): 数据,栈")]),t._v(" "),l("li",[t._v("链式存储结构  (存储不一定连续):,队列,链表")])])]),t._v(" "),l("li",[t._v("非线性数据结构\n"),l("ul",[l("li",[t._v("二维数组 多维数组 表 树 图")])])])])])}),[],!1,null,null,null);e.default=o.exports}}]);